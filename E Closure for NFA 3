#include <stdio.h>
#include <stdbool.h>

#define MAX_STATES 10

int transitions[MAX_STATES][MAX_STATES];
int epsilonClosure[MAX_STATES][MAX_STATES];
int numStates;

void initialize() {
    int i, j;
    for (i = 0; i < MAX_STATES; i++) {
        for (j = 0; j < MAX_STATES; j++) {
            transitions[i][j] = 0;
            epsilonClosure[i][j] = 0;
        }
    }
}

void readNFA() {
    int i, j;
    
    printf("Enter the number of states: ");
    scanf("%d", &numStates);
    
    printf("Enter the transitions (state next_state):\n");
    printf("(Use -1 to stop)\n");
    
    for (i = 0; i < numStates; i++) {
        int state, nextState;
        while (true) {
            scanf("%d", &nextState);
            if (nextState == -1)
                break;
            transitions[i][nextState] = 1;
        }
    }
}

void computeEpsilonClosure() {
    int i, j, k;
    for (i = 0; i < numStates; i++) {
        // Initialize epsilon closure with direct transitions
        for (j = 0; j < numStates; j++) {
            epsilonClosure[i][j] = transitions[i][j];
        }
        // Compute epsilon closure using transitive closure
        bool changed;
        do {
            changed = false;
            for (j = 0; j < numStates; j++) {
                if (epsilonClosure[i][j] == 1) {
                    for (k = 0; k < numStates; k++) {
                        if (epsilonClosure[j][k] == 1 && epsilonClosure[i][k] == 0) {
                            epsilonClosure[i][k] = 1;
                            changed = true;
                        }
                    }
                }
            }
        } while (changed);
    }
}

void printEpsilonClosure() {
    printf("Epsilon Closure:\n");
    int i, j;
    for (i = 0; i < numStates; i++) {
        printf("e-Closure(%d) = { ", i);
        for (j = 0; j < numStates; j++) {
            if (epsilonClosure[i][j] == 1) {
                printf("%d ", j);
            }
        }
        printf("}\n");
    }
}

int main() {
    initialize();
    readNFA();
    computeEpsilonClosure();
    printEpsilonClosure();
    return 0;
}
